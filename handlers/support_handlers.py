import sqlite3 as sq
import config
import req
from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

rt = Router()
db = sq.connect('database.db')
cur = db.cursor()


@rt.message(Command("support"))
async def client_question(message: Message, state: FSMContext, bot: Bot):
	try:
		await state.set_state(req.quest.text)
		await message.answer("üéü | –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å")

	except Exception as e:
		cid = message.chat.id
		await message.answer("‚ö† | –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
		await bot.send_message(config.admin, f"–°–ª—É—á–∏–ª–∞—Å—å *–æ—à–∏–±–∫–∞* –≤ —á–∞—Ç–µ *{cid}*\n–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: `{e}`", parse_mode='Markdown')


@rt.message(req.quest.text)
async def question(message: Message, state: FSMContext, bot: Bot):
	await state.update_data(quest=message.text)
	if message.from_user.username is None:
		who = "–ù–∏–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
	else:
		who = "@" + message.chat.username
	request = await state.get_data()
	await message.reply("üïí | –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
	await bot.send_message(config.support_chat, f'‚úâ | –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å\n–û—Ç: {who}\n–í–æ–ø—Ä–æ—Å: {request['quest']}')
	await bot.send_message(config.support_chat, f'üìù –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–≤–µ–¥–∏—Ç–µ `/answer {message.chat.id}`', parse_mode='Markdown')


@rt.message(Command("answer"))
async def answer(message: Message, bot: Bot):
	args = req.extract_arg(message.text)
	if len(args) >= 2:
		chatid = str(args[0])
		args.pop(0)
		answr = ""
		for ot in args:
			answr += ot + " "
	else:
		await message.reply('‚ö† | –£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã')
		return
	await bot.send_message(chatid, f'*–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n{answr}', parse_mode='HTML')
	await message.answer('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ')
